<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xh.dao.KbFileMapper">
  <resultMap id="BaseResultMap" type="com.xh.entity.KbFile">
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="file_code" property="fileCode" jdbcType="CHAR" />
    <result column="file_name" property="fileName" jdbcType="VARCHAR" />
    <result column="file_info" property="fileInfo" jdbcType="VARCHAR" />
    <result column="file_type" property="fileType" jdbcType="VARCHAR" />
    <result column="file_status" property="fileStatus" jdbcType="VARCHAR" />
    <result column="file_level" property="fileLevel" jdbcType="INTEGER" />
    <result column="project_code" property="projectCode" jdbcType="CHAR" />
    <result column="file_event_type" property="fileEventType" jdbcType="VARCHAR" />
    <result column="file_event_level" property="fileEventLevel" jdbcType="VARCHAR" />
    <result column="file_research_user_code" property="fileResearchUserCode" jdbcType="VARCHAR" />
    <result column="file_research_start_time" property="fileResearchStartTime" jdbcType="DATE" />
    <result column="create_user_code" property="createUserCode" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_user_code" property="updateUserCode" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, file_code, file_name, file_info, file_type, file_status, file_level, project_code, 
    file_event_type, file_event_level, file_research_user_code, file_research_start_time, 
    create_user_code, create_time, update_user_code, update_time
  </sql>
  <!-- 新增文件信息 -->
  <insert id="insertFile" parameterType="com.xh.entity.KbFile">
  	insert into ${fileTabelName}(id, file_code, file_name, file_info, file_type, file_status, file_level, project_code,
  	file_event_type, file_event_level, file_research_user_code, file_research_start_time,
  	create_user_code, create_time, update_user_code)
  	values(#{kf.fileCode},#{kf.fileName},#{kf.fileInfo},#{kf.fileType},#{kf.fileStatus},#{kf.fileLevel},#{kf.projectCode},#{kf.fileEventType},#{kf.fileEventLevel},#{kf.researchUserCode},#{kf.fileResearchStartTime},#{kf.createUserCode},#{kf.createTime},#{kf.updateUserCode})
  </insert>
  <!-- 根据员工编码查询当前项目下的所有文件 -->
  <select id="selectFileByUserCode" resultType="map">
  	SELECT a.id ,a.file_code,a.file_name,a.file_info,a.file_type,a.create_time,a.file_level,b.file_permission FROM ${fileTableName} a INNER JOIN kb_file_user b ON a.file_code = b.file_code AND b.user_code = #{userCode} AND a.project_code = #{projectCode}
  </select>
  <!-- 根据员工编码查询当前项目下的特定文件 -->
  <select id="selectFileByParams" resultType="map">
  	  	SELECT a.id ,a.file_code,a.file_name,a.file_info,a.file_type,a.create_time,a.file_level,b.file_permission,a.file_status,b.user_name FROM ${fileTableName} a INNER JOIN kb_file_user b ON a.file_code = b.file_code AND b.user_code = #{userCode} AND a.project_code = #{projectCode} 
  	  	<if test="fileSelMap!=null">
	  	  	<where>
	  	  		<if test="fileSelMap.fileName!=null and fileSelMap.fileName!=''">
	  	  			and locate (#{fileSelMap.fileName}, a.file_name)>0
	  	  		</if>
	  	  		<if test="fileSelMap.startDate!=null and fileSelMap.startDate!=''">
	  	  			and TIMESTAMPDIFF(HOUR,#{fileSelMap.startDate},a.create_time) &gt;= 0 and  TIMESTAMPDIFF(HOUR,#{fileSelMap.endDate},a.create_time) &lt; 24
	  	  		</if>
	  	  		and a.file_status &lt;&gt; 'delete'
	  	  	</where>
  	  	</if>
  </select>
  <!-- 根据员工编码查询当前项目下的所有文件行数 -->
  <select id="selectFileCount" resultType="_int">
    	SELECT count(1) FROM ${fileTableName} a INNER JOIN kb_file_user b ON a.file_code = b.file_code AND b.user_code = #{userCode} AND a.project_code = #{projectCode}
  </select>
  <!-- 根据文件标号查询特定文件信息 -->
  <select id="selectFileByFileCode" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" /> from ${fileTableName} where file_code =#{fileCode} and file_status ='record'
  </select>
  <!-- 文件锁定 -->
  <update id="updateLockFile">
  	<selectKey keyProperty="ft_name" order="BEFORE" keyColumn="ft_name" resultType="string">
  		select ft_name from kb_file_table where file_level = #{fileLevel}
  	</selectKey>
  	update ${ft_name} <set>file_status = 'locked',update_user_code=#{userCode}</set> where file_code = #{fileCode} 
  </update>
  <!-- 文件删除 -->
  <update id="deleteFile">
  	<selectKey keyProperty="ft_name" order="BEFORE" keyColumn="ft_name" resultType="string">
  		select ft_name from kb_file_table where file_level = #{fileLevel}
  	</selectKey>
  	update ${ft_name} <set>file_status = 'delete',update_user_code=#{userCode}</set> where file_code = #{fileCode} and (TIMESTAMPDIFF(MINUTE,create_time,NOW()) &lt;=30 or file_status = 'locked')
  </update>
</mapper>